{"version":3,"sources":["Box.js","BoxForm.js","BoxList.js","App.js","serviceWorker.js","index.js"],"names":["Box","handleClick","props","removeBox","id","style","display","width","this","height","backgroundColor","color","onClick","Component","BoxForm","state","handleChange","bind","handleSubmit","evt","setState","target","name","value","preventDefault","newState","uuidv4","box","onSubmit","htmlFor","type","onChange","BoxList","boxes","createBoxes","filter","currBox","map","key","textAlign","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"uSAoBeA,E,4MAjBbC,YAAc,kBAAM,EAAKC,MAAMC,UAAU,EAAKD,MAAME,K,uDAElD,OACE,yBAAKC,MAAO,CAAEC,QAAS,SACrB,yBACED,MAAO,CACLE,MAAM,GAAD,OAAKC,KAAKN,MAAMK,MAAhB,MACLE,OAAO,GAAD,OAAKD,KAAKN,MAAMO,OAAhB,MACNC,gBAAiBF,KAAKN,MAAMS,SAGhC,4BAAQC,QAASJ,KAAKP,aAAtB,U,GAZUY,a,sBCiEHC,E,kDA/Db,WAAYZ,GAAQ,IAAD,8BACjB,cAAMA,IACDa,MAAQ,CACXR,MAAO,GACPE,OAAQ,GACRE,MAAO,IAET,EAAKK,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBARH,E,yDAUNE,GACXX,KAAKY,SAAL,eACGD,EAAIE,OAAOC,KAAOH,EAAIE,OAAOE,U,mCAGrBJ,GACXA,EAAIK,iBACJ,IAAMC,EAAQ,2BAAQjB,KAAKO,OAAb,IAAoBX,GAAIsB,gBACtClB,KAAKN,MAAMyB,IAAIF,GACfjB,KAAKY,SAAS,CACZb,MAAO,GACPE,OAAQ,GACRE,MAAO,O,+BAIT,OACE,0BAAMiB,SAAUpB,KAAKU,cACnB,6BACE,2BAAOW,QAAQ,SAAf,SACA,2BACEP,KAAK,QACLlB,GAAG,QACH0B,KAAK,OACLP,MAAOf,KAAKO,MAAMR,MAClBwB,SAAUvB,KAAKQ,gBAGnB,6BACE,2BAAOa,QAAQ,UAAf,UACA,2BACEP,KAAK,SACLlB,GAAG,SACH0B,KAAK,OACLP,MAAOf,KAAKO,MAAMN,OAClBsB,SAAUvB,KAAKQ,gBAGnB,6BACE,2BAAOa,QAAQ,SAAf,SACA,2BACEP,KAAK,QACLlB,GAAG,QACH0B,KAAK,OACLP,MAAOf,KAAKO,MAAMJ,MAClBoB,SAAUvB,KAAKQ,gBAGnB,gD,GA3DcH,aCuCPmB,E,kDArCb,WAAY9B,GAAQ,IAAD,8BACjB,cAAMA,IACDa,MAAQ,CACXkB,MAAO,IAET,EAAKC,YAAc,EAAKA,YAAYjB,KAAjB,gBACnB,EAAKd,UAAY,EAAKA,UAAUc,KAAf,gBANA,E,wDAQPU,GACVnB,KAAKY,SAAS,CAAEa,MAAM,GAAD,mBAAMzB,KAAKO,MAAMkB,OAAjB,CAAwBN,Q,gCAErCvB,GACRI,KAAKY,SAAS,CACZa,MAAOzB,KAAKO,MAAMkB,MAAME,QAAO,SAACC,GAAD,OAAaA,EAAQhC,KAAOA,S,+BAGrD,IAAD,OACD6B,EAAQzB,KAAKO,MAAMkB,MAAMI,KAAI,SAACV,GAAD,OACjC,kBAAC,EAAD,CACEW,IAAKX,EAAIvB,GACTA,GAAIuB,EAAIvB,GACRD,UAAW,EAAKA,UAChBM,OAAQkB,EAAIlB,OACZF,MAAOoB,EAAIlB,OACXE,MAAOgB,EAAIhB,WAGf,OACE,yBAAKN,MAAO,CAAEkC,UAAW,SACvB,4DACA,kBAAC,EAAD,CAASZ,IAAKnB,KAAK0B,cAClBD,O,GAhCapB,aCSP2B,MARf,WACE,OACE,yBAAKC,UAAU,OACb,kBAAC,EAAD,QCIcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.9e182374.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nclass Box extends Component {\n  handleClick = () => this.props.removeBox(this.props.id);\n  render() {\n    return (\n      <div style={{ display: \"flex\" }}>\n        <div\n          style={{\n            width: `${this.props.width}px`,\n            height: `${this.props.height}px`,\n            backgroundColor: this.props.color,\n          }}\n        ></div>\n        <button onClick={this.handleClick}>X</button>\n      </div>\n    );\n  }\n}\n\nexport default Box;\n","import React, { Component } from \"react\";\nimport { v4 as uuidv4 } from \"uuid\";\n\nclass BoxForm extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      width: \"\",\n      height: \"\",\n      color: \"\",\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n  handleChange(evt) {\n    this.setState({\n      [evt.target.name]: evt.target.value,\n    });\n  }\n  handleSubmit(evt) {\n    evt.preventDefault();\n    const newState = { ...this.state, id: uuidv4() };\n    this.props.box(newState);\n    this.setState({\n      width: \"\",\n      height: \"\",\n      color: \"\",\n    });\n  }\n  render() {\n    return (\n      <form onSubmit={this.handleSubmit}>\n        <div>\n          <label htmlFor=\"width\">Width</label>\n          <input\n            name=\"width\"\n            id=\"width\"\n            type=\"text\"\n            value={this.state.width}\n            onChange={this.handleChange}\n          />\n        </div>\n        <div>\n          <label htmlFor=\"height\">Height</label>\n          <input\n            name=\"height\"\n            id=\"height\"\n            type=\"text\"\n            value={this.state.height}\n            onChange={this.handleChange}\n          />\n        </div>\n        <div>\n          <label htmlFor=\"color\">Color</label>\n          <input\n            name=\"color\"\n            id=\"color\"\n            type=\"text\"\n            value={this.state.color}\n            onChange={this.handleChange}\n          />\n        </div>\n        <button>Add Box</button>\n      </form>\n    );\n  }\n}\nexport default BoxForm;\n","import React, { Component } from \"react\";\nimport Box from \"./Box\";\nimport BoxForm from \"./BoxForm\";\n\nclass BoxList extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      boxes: [],\n    };\n    this.createBoxes = this.createBoxes.bind(this);\n    this.removeBox = this.removeBox.bind(this);\n  }\n  createBoxes(box) {\n    this.setState({ boxes: [...this.state.boxes, box] });\n  }\n  removeBox(id) {\n    this.setState({\n      boxes: this.state.boxes.filter((currBox) => currBox.id !== id),\n    });\n  }\n  render() {\n    const boxes = this.state.boxes.map((box) => (\n      <Box\n        key={box.id}\n        id={box.id}\n        removeBox={this.removeBox}\n        height={box.height}\n        width={box.height}\n        color={box.color}\n      />\n    ));\n    return (\n      <div style={{ textAlign: \"left\" }}>\n        <h1>Colored Box Maker From Input</h1>\n        <BoxForm box={this.createBoxes} />\n        {boxes}\n      </div>\n    );\n  }\n}\n\nexport default BoxList;\n","import React from \"react\";\nimport \"./App.css\";\n\nimport BoxList from \"./BoxList\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <BoxList />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}